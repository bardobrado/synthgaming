import { Engine } from "@babylonjs/core/Engines/engine";
import { BaseTexture } from "@babylonjs/core/Materials/Textures/baseTexture";
import { BaseControl } from "../coreControls/baseControl";
/**
 * Defines a set of options provided to the timeline.
 */
export interface ITimelineOptions {
    /**
     * Defines the total length of the video. This helps computing where we are in the video.
     */
    totalDuration: number;
    /**
     * The width of the thumbnails.
     */
    thumbnailWidth: number;
    /**
     * The height of the thumbnails.
     */
    thumbnailHeight: number;
    /**
     * Defines the URI of loding texture used to replace thumbnail during loading.
     */
    loadingTextureURI: string;
    /**
     * Callback to implement to provide back the required picture info.
     *
     * This will be regularly called for each needed thumbnail by specifying the time
     * of the required picture. It can return either a texture, a video, a canvas or a url.
     */
    getThumbnailCallback: (time: number) => BaseTexture | HTMLCanvasElement | HTMLVideoElement | string;
    /**
     * Defines whether the closest existing/loaded thumbnail should be use in place of the loading texture.
     * True by default.
     */
    useClosestThumbnailAsLoadingTexture?: boolean;
}
/**
 * Represents a timeline: a list of thumbnails for a video.
 * The thumbnails are evenly distributed along the visible duration from the video
 * The smallest granularity is the second to ensure that 128 width thumbnails would fit
 * in memory for a 1 hour long video.
 *
 * Thumbnail generation is out of scope of the control. They are the responsibility of the client code
 * which can dynamically generate or pre generate them on a server.
 */
export declare class Timeline extends BaseControl {
    private readonly _options;
    private _effectRenderer;
    private _effectWrapper;
    private _loadingThumbnail;
    private _thumbnails;
    private _totalThumbnails;
    private _visibleThumbnails;
    private _totalDuration;
    private _visibleDuration;
    private _currentTime;
    private _intervalDuration;
    private _widthScale;
    private _heightScale;
    private _heightOffset;
    private _shouldRender;
    private _renderFunction;
    /**
     * Gets the total duration of the video the canvas has been configured to
     * represent.
     */
    readonly totalDuration: number;
    /**
     * Gets the visible duration the timeline canvas can display without scrolling.
     * It depends on the total number of thumbnails configured.
     */
    readonly visibleDuration: number;
    /**
     * Gets the max value that can be set as currentTime.
     */
    readonly maxSettableTime: number;
    /**
     * Gets the current start time of the visible part of the timeline.
     */
    readonly currentTime: number;
    /**
     * Gets the current end time of the visible part of the timeline.
     */
    readonly endVisibleTime: number;
    /**
     * Gets the current duration of the interval between two consecutive thumbnails.
     */
    readonly intervalDuration: number;
    /**
     * Gets the total number of thumbnails the timeline has been set to display.
     * It depends mainly of the zoom level and the size of the canvas + desired thumbnail one.
     */
    readonly totalThumbnails: number;
    /**
     * Gets the number of thumbnails visible in the canvas without scrolling.
     * This is the ideal number when the start time is exactly equivalent to the
     * start of a thumbnail.
     */
    readonly visibleThumbnails: number;
    /**
     * Instantiates a timeline object able to display efficiently a video timeline.
     * @param parent defines the parent of the control. It could be either:
     *   - A canvas element: the canvas we want to render the control in.
     *   - An engine instance: the Babylon.js engine to use to render the control.
     *   - Another Babylon.js control: this allows sharing the engine cross controls to mix and match them for instance.
     * @param options defines the set of options used by the timeline control.
     */
    constructor(parent: BaseControl | Engine | HTMLCanvasElement, options: ITimelineOptions);
    /**
     * Starts rendering the timeline in the canvas.
     * @param callback defines an optional callback that would be run during the RAF.
     */
    runRenderLoop(callback?: () => void): void;
    /**
     * Stops rendering the timeline in the canvas.
     */
    stopRenderLoop(): void;
    /**
     * Caches one thumbnail for a given time. This can be used to preload thumbnails if needed.
     * @param textureData defines the texture data as a texture, a video, a canvas or a url.
     * @param time defines the time the thumbnail should be used at.
     * @returns the thumbnail texture.
     */
    addThumbnail(textureData: BaseTexture | HTMLCanvasElement | HTMLVideoElement | string, time: number): BaseTexture;
    /**
     * Renders the current state of the timeline to the canvas.
     * @param callback defines an optional callback that would be run during the RAF.
     */
    render(callback?: () => void): void;
    /**
     * Sets the current time to display the timeline from.
     * @param time defines the desired time to start from.
     * @returns the clamped current time computed to ensure it fits in the available time range.
     */
    setCurrentTime(time: number): void;
    /**
     * Sets the amount of thumbnails the timeline should contain. It is all of them including the invisible ones due to scrolling.
     * Be carefull, the current time might be impacted to ensure it always starts
     * at the beginning of the displayed thumbnails list.
     * @param totalThumbnails defines the desired number of thumbnails desired.
     * @returns the clamped total thumbnails computed to ensure it fits in the available time range.
     */
    setTotalThumbnails(totalThumbnails: number): number;
    /**
     * Sets the amount of time we should see in the timeline as a zoom level in percentage.
     * Be carefull, the current time might be impacted to ensure it always starts
     * at the beginning of the displayed thumbnails list.
     * @param percent defines the desired level of zoom 0% means the entire video is visible without scrolling and 100% the smallest granularity.
     * @returns the clamped total thumbnails computed to ensure it fits in the available time range.
     */
    setVisibleDurationZoom(percent: number): number;
    /**
     * Resizes the timeline to adapt to the new canvas size.
     * The canvas has to be resized before hand.
     * Be carefull, the current time and visible duration might be impacted to ensure it always starts
     * at the beginning of the displayed thumbnails list.
     */
    resize(): void;
    /**
     * Dispose all the associated resources with WebGL.
     */
    dispose(): void;
    private _initializeDurations;
    private _initializeCanvasRelativeDurations;
    private _initializeTextures;
    private _initializeRenderer;
    private _getTexture;
    private _getLoadingThumbnail;
}
