{"version":3,"file":"shader.js","sourceRoot":"","sources":["../../../src/timeline/shader.ts"],"names":[],"mappings":"AACA,mGAAmG;AACnG,EAAE;AACF,kHAAkH;AAClH,2DAA2D;AAC3D,EAAE;AACF,0DAA0D;AAC1D,2DAA2D;AAC3D,EAAE;AACF,gCAAgC;AAChC,8DAA8D;AAC9D,EAAE;AACF,yCAAyC;AACzC,GAAG;AACH,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AACxC,wCAAwC;AAExC,MAAM,YAAY,GAAG;;;;;;;;;;;;;;;CAepB,CAAC;AAEF,MAAM,cAAc,GAAG;;;;;;;;;;CAUtB,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG;IAC/B,IAAI,EAAE,UAAU;IAChB,YAAY;IACZ,cAAc;IACd,cAAc,EAAE,CAAC,UAAU,CAAC;IAC5B,YAAY,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC;IACjC,YAAY,EAAE,CAAC,WAAW,CAAC;CAC9B,CAAA","sourcesContent":["\r\n// We are rendering a serie of Quad (one per thumbnail) already in UV space to simplify the shader.\r\n//\r\n// We therefore need to scale and offset the rendering for each thumbnail and then project in Clip space (-1 to 1)\r\n//   1. glPosition = (position * scale + offset) * 2. - 1.;\r\n//\r\n// and to optimize at most we would like only one madd so:\r\n//   2. glPosition = position * shaderScale + shaderOffset;\r\n//\r\n// We can then developped 1. to:\r\n//   3. glPosition = position * scale * 2. + offset * 2. - 1.;\r\n//\r\n// and finally infer from 2. and 3. that:\r\n// \r\n// -------------------------------------\r\n// |                                   |\r\n// |  shaderScale = scale * 2.;        |\r\n// |  shaderOffset = offset * 2. - 1.; |\r\n// |                                   |\r\n// -------------------------------------\r\n\r\nconst vertexShader = `\r\n    attribute vec2 position;\r\n\r\n    uniform vec2 scale;\r\n    uniform vec2 offset;\r\n\r\n    varying vec2 uv;\r\n\r\n    void main(void) {\r\n        uv = position;\r\n\r\n        vec2 canvasPosition = position * scale + offset;\r\n\r\n        gl_Position = vec4(canvasPosition, 0.0, 1.0);\r\n    }\r\n`;\r\n\r\nconst fragmentShader = `\r\n    varying vec2 uv;\r\n\r\n    uniform sampler2D thumbnail;\r\n\r\n    void main(void) {\r\n        vec3 color = texture2D(thumbnail, uv).rgb;\r\n\r\n        gl_FragColor = vec4(color, 1.);\r\n    }\r\n`;\r\n\r\nexport const ShaderConfiguration = {\r\n    name: \"timeline\",\r\n    vertexShader,\r\n    fragmentShader,\r\n    attributeNames: [\"position\"],\r\n    uniformNames: [\"scale\", \"offset\"],\r\n    samplerNames: [\"thumbnail\"],\r\n}"]}