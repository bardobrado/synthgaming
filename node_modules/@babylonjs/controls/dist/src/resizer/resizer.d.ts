import { Engine } from "@babylonjs/core/Engines/engine";
import { BaseTexture } from "@babylonjs/core/Materials/Textures/baseTexture";
import { BaseControl } from "../coreControls/baseControl";
/**
 * Represents a resizer control leveraging WebGL to speed up resizing images.
 *
 * One of the biggest advantage is that the output can directly be used as a
 * Babylon.js Texture so that if you need to resize thumbnails,
 * they do not need any extra copies a canvas2D would have.
 */
export declare class Resizer extends BaseControl {
    private _effectRenderer;
    private _effectWrapper;
    /**
     * Instantiates a resizer object able to efficiently resize a picture on the GPU.
     * @param parent defines the parent of the control. It could be either:
     *   - A canvas element: the canvas we want to render the control in.
     *   - An engine instance: the Babylon.js engine to use to render the control.
     *   - Another Babylon.js control: this allows sharing the engine cross controls to mix and match them for instance.
     */
    constructor(parent: BaseControl | Engine | HTMLCanvasElement);
    /**
     * Dispose all the associated resources with WebGL.
     */
    dispose(): void;
    /**
     * This will resize the texture to fit in the canvas size.
     * @param input defines the picture input we want to resize. It can be the url of a texture, another canvas or a video element.
     * @returns a promise to know when the rendering is done.
     */
    resize(textureData: BaseTexture | HTMLCanvasElement | HTMLVideoElement | string): Promise<null>;
    /**
     * This will return a Babylon texture resized to a chosen size.
     * @param textureData defines the picture input we want to resize. It can be the url of a texture, another canvas or a video element.
     * @param size defines the The chosen size of the texture on GPU.
     * @returns The Babylon texture to be used in other controls for instance. Be carefull, the texture might not be ready
     * as soon as you get it.
     */
    getResizedTexture(textureData: BaseTexture | HTMLCanvasElement | HTMLVideoElement | string, size: {
        width: number;
        height: number;
    }): BaseTexture;
    private _render;
    private _initializeRenderer;
}
